#!/usr/bin/python

'''
http://projecteuler.net/problem=14

The following iterative sequence is defined for the set of positive
integers:

    n -> n/2 (n is even)
    n -> 3n + 1 (n is odd)

Using the rule above and starting with 13, we generate the following
sequence:

    13 -> 40 -> 20 -> 10 -> 5 -> 16 -> 8 -> 4 -> 2 -> 1

It can be seen that this sequence (starting at 13 and finishing at 1)
contains 10 terms. Although it has not been proved yet (Collatz
Problem), it is thought that all starting numbers finish at 1.

Which starting number, under one million, produces the longest chain?

NOTE: Once the chain starts the terms are allowed to go above one
million.
'''

def main():
    # Create a tuple that stores the length of the longest sequence
    # and the integer that generated it
    LongestSequence = (0, 0)

    # We only need to check the integers from 500,000 to 999,999
    # because every integer from 1 to 499,999 is part of a sequence
    # that is generated by that integer * 2
    for i in range(500000, 1000000):
        SequenceLength = 0
        j = i

        # Find the length of the sequence for the current integer
        while j != 1:
            SequenceLength += 1

            if j % 2 == 0:
                j = j // 2
            else:
                j = (j * 3) + 1

        if SequenceLength > LongestSequence[1]:
            LongestSequence = (i, SequenceLength)

    # Print the answer
    print(LongestSequence[0])

if __name__ == "__main__":
    main()
